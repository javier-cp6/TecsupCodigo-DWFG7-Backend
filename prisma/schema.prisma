// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Departamento {
  id     Int    @id @unique @default(autoincrement())
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference
  nombre String @db.VarChar(45) //tipo de dato específico

  // @map indica nonmbre de columna en la db. omitir si es el mismo
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_At")

  // relación: un departamento tiene varios trabajadores
  trabajadores Trabajador[]

  @@map("departamentos")
}

model Trabajador {
  id       Int            @id @unique @default(autoincrement())
  nombre   String         @db.VarChar(45)
  // con ? se admite valores nulos
  apellido String?        @db.VarChar(45)
  email    String         @db.VarChar(45)
  password String         @db.Text
  // tipo de dato ENUM
  rol      ROL_TRABAJADOR @default(OBRERO)
  validado Boolean        @default(false)

  // relacion (one to many): Departamento Trabajador

  // https://www.prisma.io/docs/concepts/components/prisma-schema/relations/one-to-many-relations
  // crear columna
  departamentoId Int          @map("departamento_id")
  // crear relación
  departamento   Departamento @relation(fields: [departamentoId], references: [id])
  // agregar relación en Departamento (trabajadores Trabajador[])

  // relación: un trabajador tiene múltiples asistencias
  asistencias Asistencia[]

  // relación de tabla consigo misma
  supervisorId Int?         @map("supervisor_id")
  trabajadores Trabajador[] @relation("trabajadores")
  supervisor   Trabajador?  @relation("trabajadores", fields: [supervisorId], references: [id])

  @@map("trabajadores")
}

model Asistencia {
  id      Int      @id @unique @default(autoincrement())
  fecha   DateTime @db.Date
  ingreso DateTime @db.Time()
  salida  DateTime @db.Time()

  // relación (one to many): Trabajador Asistencia
  trabajadorId Int        @map("trabajador_id")
  trabajador   Trabajador @relation(fields: [trabajadorId], references: [id])

  @@map("asistencias")
}

enum ROL_TRABAJADOR {
  GERENTE
  SUPERVISOR
  OBRERO
  PRACTICANTE
}
